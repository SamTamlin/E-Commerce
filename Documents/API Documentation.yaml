openapi: 3.0.1

info:
  title: E-Commerce
  version: 1.0.0
  description: "A Codecadamy project: E-Commerce App (REST API)"

paths:
  /account/register:
    post:
      summary: Create a new user account
      description: >-
        Creates a new user account requiring an email, password, first and last name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: jsmith4
                email:
                  type: string
                  example: random@email.com
                first_name: 
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Smith
                password:
                  type: string
                  example: 5up3rC00lP@55w0rD!
      operationId: create_user_account
      responses:
        201:
          description: 201 Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 11
                  username:
                    type: string
                    example: jsmith4
                  email:
                    type: string
                    example: random@email.com
                  first_name:
                    type: string
                    example: John
                  last_name:
                    type: string
                    example: Smith

        409:
          description: 409 Conflict
          content:
            string:
              schema:
                type: string
                example: Either the username or email already exist, please try again
  /account/login:
    post:
      summary: Login to a user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: jsmith4
                password:
                  type: string
                  example: 5up3rC00lP@55w0rD!
      operationId: log_in
      responses:
        200:
          description: 200 Success - Redirects to /account/
        401:
          description: 401 Unauthorized
        409:
          description: 409 Conflict
          content:
            string:
              schema:
                type: string
                example: 'The username ausername already exists, please login'
  /account/logout:
    post:
      summary: Logout of user account
      responses:
        401:
          description: 401 Unauthorized - logs user out and redirects to /account
  /account:
    get:
      summary: Retreive account information
      operationId: get_account_info
      responses:
        200:
          description: The corrisponding user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 11
                  username:
                    type: string
                    example: jsmith4
                  email:
                    type: string
                    example: random@email.com
                  first_name:
                    type: string
                    example: John
                  last_name:
                    type: string
                    example: Smith
        401:
          description: 401 Unauthorized
          content:
            string:
              schema:
                type: string
                example: 'Unauthorized: Please log in to view your account information'
    put:
      summary: Edit account details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: random@email.com
                first_name:
                  type: string
                  example: Jane
                last_name:
                  type: string
                  example: Doe
                password:
                  type: string
                  example: 5up3rC00lP@55w0rD!
      operationId: edit_account_info
      responses:
        200:
          description: The corrisponding user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 11
                  username:
                    type: string
                    example: jsmith4
                  email:
                    type: string
                    example: random@email.com
                  first_name:
                    type: string
                    example: Jane
                  last_name:
                    type: string
                    example: Doe
        401:
          description: 401 Unauthorized
          content:
            string:
              schema:
                type: string
                example: 'Unauthorized: Please log in to edit your account information'
        404:
          description: 404 Not Found
          content:
            string:
              schema:
                type: string
                example: User not found
    delete:
      summary: Delete account
      operationId: delete_account
      responses:
        204:
          description: 204 No content
        401:
          description: 401 Unauthorized
          content:
            string:
              schema:
                type: string
                example: 'Unauthorized: You must be logged in to delete your account!'
  /product:
    get:
      summary: Retreive full list of products
      responses:
        200:
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfProducts'
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Lemonade
                price: 
                  type: integer
                  example: 1.29
      operationId: 'create_product'
      responses:
        201:
          description: 201 Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 41
                  name:
                    type: string
                    example: Lemonade
                  price: 
                    type: integer
                    example: 1.29
  /product/{id}:
    get:
      summary: Retreive product information 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      operationId: 'get_product_info'
      responses:
        200:
          description: 200 OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Turnip - White, Organic
                  price:
                    type: number
                    example: 0.87
        404:
          description: 404 Not Found
          content:
            string:
              schema:
                type: string
                example: Product with an id of 42 does not exist.
    put:
      summary: Edit product name or price
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 41
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Cream Soda
                price: 
                  type: integer
                  example: 1.09
      operationId: 'edit_product_info'
      responses:
        200:
          description: 200 OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 41
                  name:
                    type: string
                    example: Cream Soda
                  price:
                    type: integer
                    example: 1.09
        404:
          description: 404 Not Found
          content:
            string:
              schema:
                type: string
                example: Product with an id of 42 does not exist
    delete:
      summary: Delete product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 22
      operationId: 'delete_product'
      responses:
        204:
          description: 204 No Content
  /account/order:
    get:
      summary: Retreive list of orders by user
      description: Retreives a list of orders made by the user if they are logged in.
      operationId: 'get_all_orders'
      responses:
        200:
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfOrders'
        204:
          description: 204 No Content
          content:
            string:
              schema:
                type: string
                example: There are no orders for account dposten3
  /account/order/{order_id}:
    get:
      summary: Retrive details of a single order by order_id
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            example: 32
      operationId: get_single_order
      responses:
        200:
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfOrderItems'
        404:
          description: 404 Not Found
          content:
            string:
              schema:
                type: string
                example: 'Order with an id of 1 does not exist on this account.'
  /account/basket:
    get:
      summary: Retreive list of baskets by user
      description: Retreives a list of baskets made by the user if they are logged in.
      operationId: 'get_all_baskets'
      responses:
        200:
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfBaskets'
        204:
          description: 204 No Content
          content:
            string:
              schema:
                type: string
                example: There are no baskets for account dposten3
    post:
      summary: Create a new basket
      description: 'Must be logged in to create a basket'
      operationId: 'create_order'
      responses:
        200:
          description: 200 OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    example: 51
  /account/basket/{basket_id}:
    get:
      summary: Retrive details of a single basket by basket_id
      parameters:
        - name: basket_id
          in: path
          required: true
          schema:
            type: integer
            example: 12
      operationId: get_single_basket
      responses:
        200:
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfBasketItems'
        404:
          description: 404 Not Found
          content:
            string:
              schema:
                type: string
                example: 'Basket with an id of 1 does not exist on this account.'
    delete:
      summary: Delete basket
      parameters:
        - name: basket_id
          in: path
          required: true
          schema:
            type: integer
            example: 51       
      operationId: delete_order
      responses:
        204:
          description: 204 No Content
  /account/basket/add/{basket_id}:
    put:
      summary: Add product to basket
      parameters:
        - name: basket_id
          in: path
          required: true
          schema:
            type: integer
            example: 12
      requestBody:
        description: Adding 2 'Cake - Mini Cheesecake Cherry' to the basket with a basket_id of 12.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  example: 2
                quantity:
                  type: integer
                  example: 2
      operationId: add_to_order
      responses:
        200:
          description: 200 OK - Redirected to /account/order/12
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfBasketItemsProductAdded'
        409:
          description: 409 Conflict
          content:
            string:
              schema:
                type: string
                example: Product_id 2 already exists in basketId 12, no change has been made
  /account/basket/edit/{basket_id}:
    put:
      summary: Edit product quantity in a basket
      parameters:
        - name: basket_id
          in: path
          required: true
          schema:
            type: integer
            example: 12
      requestBody:
        description: Change quantity of "Cream - Soda" from 2 to 1.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  example: 22
                quantity: 
                  type: integer
                  example: 1
      operationId: edit_order_quantity
      responses:
        200:
          description: 200 OK - Redirected to /account/order/{order_id}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfBasketItemsQuantityChanged'
        409:
          description: 404 Not Found
          content:
            string:
              schema:
                type: string
                example: Product_id 2 does not exist in basketId 12, no change has been made
  /account/basket/delete/{basket_id}:
    delete:
      summary: Delete item in basket
      parameters:
        - name: basket_id
          in: path
          required: true
          schema:
            type: integer
            example: 2      
      operationId: delete_basket_product
      responses:
        204:
          description: 204 No Content
  /account/basket/checkout/{order_id}:
    put:
      summary: Checkout - Payment received, basket turned into order.
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            example: 12
      operationId: checkout_basket
      responses:
        200:
          description: 200 OK
          content:
            string:
              schema:
                type: string
                example: Order is being processed
        404:
          description: 404 Not Found
          content:
            string:
              schema:
                type: string
                example: basket_id 12 does not exist for user msimmank0.
components:
  schemas:
    ArrayOfProducts:
      type: array
      items:
        type: object
      example:
        - id: 1
          name: Turnip - White, Organic
          price: 0.87
        - id: 2
          name: Cake - Miini Cheesecake Cherry
          price: 4.94
        - id: 3
          name: Broccoli - Fresh
          price: 1.18
        - id: 4
          name: Mushrooms - Black, Dried
          price: 2.73
        - id: 5
          name: Muffin - Blueberry Individual
          price: 0.98
        - id: 6
          name: Cheese - Gouda Smoked
          price: 3.92
        - id: 7
          name: Mousse - Mango
          price: 1.00
        - id: 8
          name: Pork - Ham Hocks - Smoked
          price: 2.63
        - id: 9
          name: Cookies Cereal Nut
          price: 0.97
        - id: 10
          name: Clams - Canned
          price: 3.16
        - id: 11
          name: Rice - Brown
          price: 2.46
        - id: 12
          name: Temperature Recording Station
          price: 2.36
        - id: 13
          name: Tea - Jasmin Green
          price: 2.82
        - id: 14
          name: Cheese - Marble
          price: 4.27
        - id: 15
          name: Wine - Magnotta - Cab Sauv
          price: 2.93
        - id: 16
          name: Lid - Translucent, 3.5 And 6 Oz
          price: 4.87
        - id: 17
          name: Artichokes - Knobless, White
          price: 1.94
        - id: 18
          name: Table Cloth 53x53 White
          price: 0.77
        - id: 19
          name: Lettuce - Curly Endive
          price: 1.42
        - id: 20
          name: Liqueur - Melon
          price: 0.08
        - id: 21
          name: Ecolab - Hand Soap Form Antibac
          price: 3.76
        - id: 22
          name: Cheese - Gouda
          price: 2.43
        - id: 23
          name: Sobe - Liz Blizz
          price: 3.97
        - id: 24
          name: Mushroom - Morels, Dry
          price: 2.56
        - id: 25
          name: Olive - Spread Tapenade
          price: 0.82
        - id: 26
          name: Chick Peas - Canned
          price: 3.68
        - id: 27
          name: Spring Roll Veg Mini
          price: 2.84
        - id: 28
          name: Wine - Ruffino Chianti Classico
          price: 4.49
        - id: 29
          name: Tart - Lemon
          price: 1.83
        - id: 30
          name: Bulgar
          price: 1.79
        - id: 31
          name: Chick Peas - Canned
          price: 0.68
        - id: 32
          name: Lettuce - Sea / Sea Asparagus
          price: 3.94
        - id: 33
          name: Cheese - Pont Couvert
          price: 4.38
        - id: 34
          name: Muffin Batt - Ban Dream Zero
          price: 2.61
        - id: 35
          name: Placemat - Scallop, White
          price: 3.33
        - id: 36
          name: Turkey - Breast, Boneless Sk On
          price: 4.21
        - id: 37
          name: Flour - Bread
          price: 0.74
        - id: 38
          name: Absolut Citron
          price: 2.35
        - id: 39
          name: Mushroom - Shitake, Fresh
          price: 4.87
        - id: 40
          name: Wine - Sauvignon Blanc Oyster
          price: 3.41  
    ArrayOfOrders:
      type: array
      items:
        type: object
      example:
        - order_id: 32
          basket_total: "4.85"
        - order_id: 39
          basket_total: "56.83"
    ArrayOfOrderItems:
      type: array
      items:
        type: object
      example:
        - order_id: 39
          product_id: 26
          product_name: Chick Peas - Canned
          price: "3.68"
          quantity: 3
          product_total: "11.04"
        - order_id: 39
          product_id: 31
          product_name: Chick Peas - Canned
          price: "0.68"
          quantity: 5
          product_total: "3.40"
        - order_id: 39
          product_id: 39
          product_name: Mushroom - Shitake, Fresh
          price: "4.87"
          quantity: 4
          product_total: "19.48"
        - order_id: 39
          product_id: 15
          product_name: Wine - Magnotta - Cab Sauv
          price: "2.93"
          quantity: 2
          product_total: "5.86"
        - order_id: 39
          product_id: 40
          product_name: Wine - Sauvignon Blanc Oyster
          price: "3.41"
          quantity: 5
          product_total: "17.05"
    ArrayOfBaskets:
      type: array
      items:
        type: object
      example:
        - order_id: 12
          basket_total: "30.76"
        - order_id: 31
          basket_total: "14.96"
        - order_id: 33
          basket_total: "37.02"
    ArrayOfBasketItems:
      type: array
      items:
        type: object
      example:
        - basket_id: 12
          product_id: 1
          product_name: Turnip - White Organic
          price: "0.87"
          quantity: 2
          product_total: "1.74"
        - basket_id: 12
          product_id: 10
          product_name: Clams - Canned
          price: "3.16"
          quantity: 3
          product_total: "9.48"
        - basket_id: 12
          product_id: 24
          product_name: Mushroom - Morels, Dry
          price: "2.56"
          quantity: 5
          product_total: "12.80"
        - basket_id: 12
          product_id: 35
          product_name: Placemant - Scallop, White
          price: "3.33"
          quantity: 1
          product_total: "3.33"
        - basket_id: 12
          product_id: 40
          product_name: Wine - Sauvignon Blanc Oyster
          price: "3.41"
          quantity: 1
          product_total: "3.41"
    ArrayOfBasketItemsProductAdded:
      type: array
      items:
        type: object
      example:
        - order_id: 12
          product_id: 10
          product_name: Clams - Canned
          price: "3.16"
          quantity: 3
          product_total: "9.48"
          transaction_complete: false
        - order_id: 12
          product_id: 2
          product_name: Cake- Mini Cheesecase Cherry
          price: "4.94"
          quantity: 2
          product_total: "9.88"
          payment_receieved: false
        - order_id: 12
          product_id: 24
          product_name: Mushroom - Morels, Dry
          price: "2.56"
          quantity: 5
          product_total: "12.80"
          transaction_complete: false
        - order_id: 12
          product_id: 35
          product_name: Placemat - Scallop, White
          price: "3.33"
          quantity: 1
          product_total: "3.33"
          transaction_complete: false
        - order_id: 12
          product_id: 1
          product_name: Turnip - White, Organic
          price: "0.87"
          quantity: 2
          product_total: "1.74"
          transaction_complete: false
        - order_id: 12
          product_id: 40
          product_name: Wine - Sauvignon Blanc Oyster
          price: "3.41"
          quantity: 1
          product_total: "3.41"
          transaction_complete: false
    ArrayOfBasketItemsQuantityChanged:
      type: array
      items:
        type: object
      example:
        - basket_id: 12
          product_id: 10
          product_name: Clams - Canned
          price: "3.16"
          quantity: 3
          product_total: "9.48"
        - basket_id: 2
          product_id: 2
          product_name: Cake - Mini Cheesecake Cherry
          price: "4.94"
          quantity: 1
          product_total: "4.94"
        - basket_id: 12
          product_id: 24
          product_name: Mushroom - Morels, Dry
          price: "2.56"
          quantity: 5
          product_total: "12.80"
        - basket_id: 12
          product_id: 35
          product_name: Placemat - Scallop, White
          price: "3.33"
          quantity: 1
          product_total: "3.33"
        - basket_id: 12
          product_id: 1
          product_name: Turnip - White, Organic
          price: "0.87"
          quantity: 2
          product_total: "1.74"
        - basket_id: 12
          product_id: 40
          product_name: Wine - Sauvignon Blanc Oyster
          price: "3.41"
          quantity: 1
          product_total: "3.41"
